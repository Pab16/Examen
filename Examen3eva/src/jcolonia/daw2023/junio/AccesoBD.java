package jcolonia.daw2023.junio;

import java.io.Closeable;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Objects;
import java.util.Properties;

/**
 * Gesti√≥n de acceso a un archivo de base de datos SQLite con datos de pa√≠ses.
 * Versi√≥n con almacenamiento de pa√≠ses como registros. Cada entrada se guarda
 * en un registro independiente, con lo que puede haber varios registros para un
 * mismo pa√≠s que tenga varias capitales o idiomas oficiales.
 * 
 * @author <a href="dmartin.jcolonia@gmail.com">David H. Mart√≠n</a>
 * @version 4.0b (20240530)
 */
public class AccesoBD implements Closeable {
	/**
	 * Texto de la consulta SQL -SQLite- para obtener un listado general ordenado
	 * por el nombre del pa√≠s. En la primera columna genera una numeraci√≥n de los
	 * resultados de la consulta seg√∫n el orden indicado.
	 */
	public static final String SELECT_TOTAL_POR_PA√çS = "SELECT Dense_rank() OVER (ORDER BY Name,Language ASC) Orden,Name,Capital,Language FROM country ORDER BY Name,Language";
	/**
	 * Texto de la consulta SQL -SQLite- para obtener un listado general ordenado
	 * por idiomas. En la primera columna genera una numeraci√≥n de los resultados de
	 * la consulta seg√∫n el orden indicado.
	 */
	public static final String SELECT_TOTAL_POR_IDIOMA = "SELECT Dense_rank() OVER (ORDER BY Language,Name ASC) Orden,Name,Capital,Language FROM country ORDER BY Language,Name";

	/** Datos de configuraci√≥n del archivo de base de datos SQLite. */
	private Properties configuraci√≥n;

	/** Conexi√≥n a la base de datos. */
	private Connection conexi√≥n;

	/** Nombre/ruta del archivo de la base de datos. */
	private String rutaArchivo;

	/**
	 * Recoge el nombre/ruta del archivo de la base de datos.
	 * 
	 * @param rutaArchivo el nombre/ruta referido
	 */
	public AccesoBD(String rutaArchivo) {
		conexi√≥n = null;
		configuraci√≥n = null;
		this.rutaArchivo = rutaArchivo;
	}

	/**
	 * Realiza la apertura de la base de datos seg√∫n los datos de configuraci√≥n.
	 * 
	 * @see #getConfiguraci√≥n()
	 * @return la conexi√≥n realizada
	 * @throws AccesoBDExcepci√≥n si se produce alguna incidencia en todo el proceso,
	 *                           especialmente si no est√° disponible el controlador
	 *                           de SQLite o no se puede acceder al archivo de la
	 *                           base de datos
	 */
	public Connection getConexi√≥n() throws AccesoBDExcepci√≥n {
		Properties configuraci√≥n;
		if (conexi√≥n == null) {
			configuraci√≥n = getConfiguraci√≥n();
			try {
				conexi√≥n = DriverManager.getConnection(configuraci√≥n.getProperty("jdbc.url"));
			} catch (SQLException ex) {
				throw new AccesoBDExcepci√≥n("Error conexi√≥n SQL", ex);
			}
		}
		return conexi√≥n;
	}

	/**
	 * Facilita los datos de configuraci√≥n. En caso de no estar disponibles los lee
	 * del archivo indicado.
	 * 
	 * @see #leerConfiguraci√≥n(String)
	 * @return los datos de configuraci√≥n
	 * @throws AccesoBDExcepci√≥n si se produce alguna incidencia en todo el proceso
	 */
	private Properties getConfiguraci√≥n() throws AccesoBDExcepci√≥n {
		if (configuraci√≥n == null) {
			configuraci√≥n = leerConfiguraci√≥n(rutaArchivo);
		}
		return configuraci√≥n;
	}

	/**
	 * Si la conexi√≥n est√° abierta, cierra la conexi√≥n.
	 * 
	 * @throws IOException si se produce alguna incidencia
	 */
	@Override
	public void close() throws IOException {
		try {
			if (conexi√≥n != null && !conexi√≥n.isClosed()) {
				conexi√≥n.close();
			}
		} catch (SQLException ex) {
			throw new IOException("Error al cerrar conexi√≥n SQL", ex);
		}
	}

	/**
	 * Realiza la consulta indicada a la base de datos, crea los pa√≠ses y los agrupa
	 * en una colecci√≥n. Evita agregar pa√≠ses con nombres repetidos; en tal caso
	 * agrega el idioma al pa√≠s existente.
	 * 
	 * @param textoSQL el texto de la consulta a realizar.
	 * @return la colecci√≥n de pa√≠ses obtenidos
	 * @throws AccesoBDExcepci√≥n si se produce cualquier incidencia, especialmente
	 *                           en el transcurso de la recogida de los pa√≠ses.
	 * 
	 * @see #SELECT_TOTAL_POR_PA√çS
	 * @see #SELECT_TOTAL_POR_IDIOMA
	 */
	public Relaci√≥nPa√≠ses consultarPa√≠ses(String textoSQL) throws AccesoBDExcepci√≥n {
		Relaci√≥nPa√≠ses conjunto = null;
		Pa√≠s elemento;

		ResultSet resultado;

		int n√∫mero;
		String nombrePa√≠s, nombreCapital, nombreIdioma;

		try (Connection conexi√≥n = getConexi√≥n(); Statement consultaSQL = conexi√≥n.createStatement();) {
			resultado = consultaSQL.executeQuery(textoSQL);

			conjunto = new Relaci√≥nPa√≠ses();
			while (resultado.next()) {
				n√∫mero = resultado.getInt("Orden");
				nombrePa√≠s = resultado.getString("Name");
				nombreCapital = resultado.getString("Capital");
				nombreIdioma = resultado.getString("Language");

				elemento = new Pa√≠s(n√∫mero, nombrePa√≠s, nombreCapital, nombreIdioma);
				conjunto.a√±adir(elemento);
			}
		} catch (AccesoBDExcepci√≥n ex) { // Cerrar y propagar
			throw ex;
		} catch (SQLException ex) { // Encapsular
			throw new AccesoBDExcepci√≥n("Error de lectura SQL", ex);
		}

		if (conjunto.getN√∫mElementos() == 0) {
			throw new AccesoBDExcepci√≥n("Carga infructuosa, 0 elementos");
		}

		return conjunto;
	}

	/**
	 * Crea un t√≠pico archivo de configuraci√≥n para acceso a una base de datos
	 * ‚ÄìSQLite‚Äì en el formato XML de
	 * {@link Properties#storeToXML(java.io.OutputStream, String)}.
	 * 
	 * @param textoRutaConfig      el nombre/ruta del archivo de configuraci√≥n
	 * @param textoRutaArchivoBD   el nombre/ruta del archivo de la base de datos
	 *                             SQLite
	 * @param sobrescribirAnterior indica si se permite sobrescribir un archivo de
	 *                             configuraci√≥n previo existente con ese mismo
	 *                             nombre
	 * @throws AccesoBDExcepci√≥n si se produce cualquier incidencia en la grabaci√≥n
	 *                           del archivo; en particular si el archivo existe y
	 *                           no se ha permitido la sobrescritura del mismo.
	 */
	public static void grabarConfiguraci√≥n(final String textoRutaConfig, final String textoRutaArchivoBD,
			final boolean sobrescribirAnterior) throws AccesoBDExcepci√≥n {
		Properties configuraci√≥nModelo;

		Path rutaConfig, rutaBD;
		rutaConfig = Path.of(textoRutaConfig);
		rutaBD = Path.of(textoRutaArchivoBD);

		if (!sobrescribirAnterior && Files.exists(rutaConfig)) {
			throw new AccesoBDExcepci√≥n("Archivo de configuraci√≥n ya existe: " + rutaConfig.toString());
		}

		configuraci√≥nModelo = new Properties();

		configuraci√≥nModelo.setProperty("jdbc.url", "jdbc:sqlite:" + rutaBD.toString());
		configuraci√≥nModelo.setProperty("jdbc.user", "");
		configuraci√≥nModelo.setProperty("jdbc.password", "üôÅ");
		configuraci√≥nModelo.setProperty("jdbc.codificaci√≥n", "UTF-8");

		try (FileOutputStream out = new FileOutputStream(rutaConfig.toFile())) {
			configuraci√≥nModelo.storeToXML(out, "Configuraci√≥n BD", "UTF-8");
		} catch (FileNotFoundException ex) {
			throw new AccesoBDExcepci√≥n("Error de archivo", ex);
		} catch (IOException ex) {
			throw new AccesoBDExcepci√≥n("Error E/S", ex);
		}
	}

	/**
	 * Carga los datos de configuraci√≥n de un archivo en el formato XML de
	 * {@link Properties#storeToXML(java.io.OutputStream, String)}.
	 * 
	 * @param textoRutaConfig el nombre/ruta del archivo de configuraci√≥n
	 * @return los datos de configuraci√≥n
	 * @throws AccesoBDExcepci√≥n si se produce cualquier incidencia en el acceso y
	 *                           lectura del archivo de configuraci√≥n.
	 */
	public static Properties leerConfiguraci√≥n(final String textoRutaConfig) throws AccesoBDExcepci√≥n {
		Properties configuraci√≥nLe√≠da;

		Path rutaConfig;
		rutaConfig = Path.of(textoRutaConfig);

		if (!Files.exists(rutaConfig)) {
			throw new AccesoBDExcepci√≥n("Archivo de configuraci√≥n no existe: " + rutaConfig.toString());
		}

		configuraci√≥nLe√≠da = new Properties();

		try (FileInputStream in = new FileInputStream(rutaConfig.toFile())) {
			configuraci√≥nLe√≠da.loadFromXML(in);
		} catch (FileNotFoundException ex) {
			throw new AccesoBDExcepci√≥n("Error de archivo", ex);
		} catch (IOException ex) {
			throw new AccesoBDExcepci√≥n("Error E/S", ex);
		}
		return configuraci√≥nLe√≠da;
	}

}
