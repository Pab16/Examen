package jcolonia.daw2023.junio;

import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Properties;

/**
 * Ejecutable simple para crear un archivo de configuraci√≥n. Versi√≥n aut√≥noma
 * simplificada -¬´esquiva¬ª excepciones, no recurre a {@link AccesoBD}.
 * 
 * @see AccesoBD#grabarConfiguraci√≥n(String, String, boolean)
 * 
 * @author <a href="dmartin.jcolonia@gmail.com">David H. Mart√≠n</a>
 * @version 4.0 (20250530)
 */
public class EjemploGuardarConfiguraci√≥n {

	/**
	 * Crea el archivo de configuraci√≥n ¬´worldconfig.xml¬ª para la base de datos
	 * SQLite ¬´world2.db¬ª.
	 * 
	 * @param argumentos opciones en l√≠nea de √≥rdenes ‚Äìno se usa‚Äì.
	 */
	public static void main(String[] argumentos) {
		Properties configuraci√≥nModelo;

		Path rutaConfig, rutaBD;
		rutaConfig = Path.of("worldconfig.xml");
		rutaBD = Path.of("world2.db");

		if (Files.exists(rutaConfig)) {
			throw new RuntimeException("Archivo de configuraci√≥n ya existe: " + rutaConfig.toString());
		}

		configuraci√≥nModelo = new Properties();

		configuraci√≥nModelo.setProperty("jdbc.url", "jdbc:sqlite:" + rutaBD.toString());
		configuraci√≥nModelo.setProperty("jdbc.user", "");
		configuraci√≥nModelo.setProperty("jdbc.password", "üôÅ");
		configuraci√≥nModelo.setProperty("jdbc.codificaci√≥n", "UTF-8");

		try (FileOutputStream out = new FileOutputStream(rutaConfig.toFile())) {
			configuraci√≥nModelo.storeToXML(out, "Configuraci√≥n BD", "UTF-8");
		} catch (IOException e) {
			e.printStackTrace();
		}

		System.out.println("Archivo creado");
	}
}
